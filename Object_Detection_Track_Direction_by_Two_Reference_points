    #!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Jul  5 12:16:30 2018

@author: pankaj
"""

import cv2
import sys
import imutils
from collections import deque
import numpy as np

major_ver, minor_ver, subminor_ver = (cv2.__version__).split('.')
 
if __name__ == '__main__' :
    
    ptsL = deque(maxlen=36)
    ptsR = deque(maxlen=36)
    counter = 0
    (dX, dY) = (0, 0)
    direction = ""

    # Set up tracker.
    # Instead of KCF, you can also use
    
    tracker_types = ['BOOSTING', 'MIL','KCF', 'TLD', 'MEDIANFLOW']
    tracker_type = tracker_types[2]
 
    if int(minor_ver) < 3:
        tracker = cv2.Tracker_create(tracker_type)
    else:
        if tracker_type == 'BOOSTING':
            trackerL = cv2.TrackerBoosting_create()
            trackerR = cv2.TrackerBoosting_create()
        if tracker_type == 'MIL':
            trackerL = cv2.TrackerMIL_create()
            trackerR = cv2.TrackerMIL_create()
        if tracker_type == 'KCF':
            trackerL = cv2.TrackerKCF_create()
            trackerR = cv2.TrackerKCF_create()
        if tracker_type == 'TLD':
            trackerL = cv2.TrackerTLD_create()
            trackerR = cv2.TrackerTLD_create()
        if tracker_type == 'MEDIANFLOW':
            trackerL = cv2.TrackerMedianFlow_create()
            trackerR = cv2.TrackerMedianFlow_create()
    # Read video
    video = cv2.VideoCapture("video_complete.mp4")
 
    # Exit if video not opened.
    if not video.isOpened(): 
        print "Could not open video"
        sys.exit()
 
    # Read first frame.
    
    ok,frame = video.read()
    if not ok:
     print 'Cannot read video file'
     sys.exit()
        

    frame = imutils.resize(frame, width=600)
    # the lines below to select bounding box
    bbox1 = cv2.selectROI(frame, False)
    bbox2 = cv2.selectROI(frame,False)
    
    # Initialize trackers with first frame and bounding box
    ok = trackerL.init(frame, bbox1)
    ok = trackerR.init(frame, bbox2)
    #creating a video
    #fourcc = cv2.CV_FOURCC(*'X264')
    fourcc = cv2.VideoWriter_fourcc(*'MJPG')
    out = cv2.VideoWriter('output.mov',fourcc, 10.0, (600,600),True)
    
    while True:
        # Read a new frame
        
        ok, frame = video.read()
        if not ok:
            break   
 
        frame = imutils.resize(frame, width=600)
        # Update tracker
        ok, bboxL = trackerL.update(frame)
        ok, bboxR = trackerR.update(frame)
        
        # Draw bounding box
        if ok:
            # Tracking success
            
            #Left Tracker
            pL1 = (int(bboxL[0]), int(bboxL[1]))
            pL2 = (int(bboxL[0] + bboxL[2]), int(bboxL[1] + bboxL[3]))
            #Right Tracker
            pR1 = (int(bboxR[0]), int(bboxR[1]))
            pR2 = (int(bboxR[0] + bboxR[2]), int(bboxR[1] + bboxR[3]))
            
            cv2.rectangle(frame, pL1, pL2, (255,0,0), 2, 1)
            cv2.rectangle(frame, pR1, pR2, (255,0,0), 2, 1)
            
            ptsL.appendleft([pL1,pL2])
            ptsR.appendleft([pR1,pR2])
            
        else :
            # Tracking failure
            cv2.putText(frame, "Tracking failure detected", (100,80), cv2.FONT_HERSHEY_SIMPLEX, 0.75,(0,0,255),2)
            
        # Display tracker type on frame
        cv2.putText(frame, tracker_type + " Tracker", (100,20), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (50,170,50),2);
        
        for i in np.arange(1, len(ptsL)):
        # if either of the tracked points are None, ignore
        # them
         if ptsL[i - 1] is None or ptsL[i] is None:
            continue
 
        # check to see if enough points have been accumulated in
        # the buffer
         if counter >= 10 and i == 1 and ptsL[-10] is not None and ptsR[-10]:
            # compute the difference between the x and y
            # coordinates and re-initialize the direction
            # text variables
            
            dX = ptsL[-10][0][0] - ptsR[i][0][0]
            dY=  ptsL[-10][0][1] - ptsR[i][0][1]
            print dY
            (dirX, dirY) = ("", "")
 
            # ensure there is significant movement in the
            # y-direction
            if np.abs(dY) > 35:
                dirY = "Left" if np.sign(dY) == 1 else "Right"
            
            # handle when both directions are non-empty
            if dirX == "" and dirY == "":
                direction = "Straight"
 
            # otherwise, only one direction is non-empty
            if dirX!="" or dirY!="":
                direction = dirX if dirX != "" else dirY
       
     # show the direction of movement on
     # the frame
        cv2.putText(frame, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
             0.65, (0, 0, 255), 3)
        cv2.putText(frame, "dx: {}, dy: {}".format(dX, dY),
        (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX,
        0.35, (0, 0, 255), 1)
        
        # Display result
        cv2.imshow("Tracking", frame)
        out.write(frame)
        counter+=1   
 
        # Exit if ESC pressed
        key = cv2.waitKey(1) & 0xFF
        if key == ord("q"):
		break
    
    out.release()
    cv2.destroyAllWindows()
